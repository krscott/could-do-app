// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
    provider        = "prisma-client-js"
    previewFeatures = ["referentialIntegrity"]
}

datasource db {
    provider             = "mysql"
    // NOTE: When using postgresql, mysql or sqlserver, uncomment the @db.text annotations in model Account below
    // Further reading:
    // https://next-auth.js.org/adapters/prisma#create-the-prisma-schema
    // https://www.prisma.io/docs/reference/api-reference/prisma-schema-reference#string
    url                  = env("DATABASE_URL")
    referentialIntegrity = "prisma"
}

model Example {
    id String @id @default(cuid())
}

// Necessary for Next auth
model Account {
    id                String  @id @default(cuid())
    userId            String
    type              String
    provider          String
    providerAccountId String
    refresh_token     String? @db.Text
    access_token      String? @db.Text
    expires_at        Int?
    token_type        String?
    scope             String?
    id_token          String? @db.Text
    session_state     String?
    user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String     @id @default(cuid())
    name          String?
    email         String?    @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    // TODO: Rename 'tasks'
    tickets       Task[]
    // TODO: Rename 'comments'
    Comment       Comment[]
    lists         TaskList[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

model Task {
    id           String        @id @default(cuid())
    createdAt    DateTime      @default(now())
    ownerId      String
    summary      String        @db.Text
    done         Boolean       @default(false)
    dueAt        DateTime      @default(now())
    repeatAmount Int?
    description  String?       @db.Text
    listId       String?
    repeatUnit   DurationUnit?
    // TODO: Rename 'owner'
    creator      User          @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    // TODO: Rename 'comments'
    Comment      Comment[]
    list         TaskList?     @relation(fields: [listId], references: [id], onDelete: Cascade)
}

enum DurationUnit {
    DAY
    WEEK
    MONTH
    YEAR
}

model Comment {
    id        String   @id @default(cuid())
    createdAt DateTime @default(now())
    authorId  String
    taskId    String
    comment   String   @db.Text
    author    User     @relation(fields: [authorId], references: [id], onDelete: Cascade)
    task      Task     @relation(fields: [taskId], references: [id], onDelete: Cascade)
}

model TaskList {
    id      String @id @default(cuid())
    ownerId String
    name    String
    slug    String
    owner   User   @relation(fields: [ownerId], references: [id], onDelete: Cascade)
    task    Task[]

    @@unique([ownerId, slug])
}
